/* Auto-generated by genmsg_cpp for file /home/shehzad/catkin_ws/bosch_drivers/amtec/srv/SweepPan.srv */
#ifndef AMTEC_SERVICE_SWEEPPAN_H
#define AMTEC_SERVICE_SWEEPPAN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace amtec
{
template <class ContainerAllocator>
struct SweepPanRequest_ {
  typedef SweepPanRequest_<ContainerAllocator> Type;

  SweepPanRequest_()
  : sweep_amplitude(0.0)
  , sweep_period(0.0)
  {
  }

  SweepPanRequest_(const ContainerAllocator& _alloc)
  : sweep_amplitude(0.0)
  , sweep_period(0.0)
  {
  }

  typedef double _sweep_amplitude_type;
  double sweep_amplitude;

  typedef double _sweep_period_type;
  double sweep_period;


  typedef boost::shared_ptr< ::amtec::SweepPanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amtec::SweepPanRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SweepPanRequest
typedef  ::amtec::SweepPanRequest_<std::allocator<void> > SweepPanRequest;

typedef boost::shared_ptr< ::amtec::SweepPanRequest> SweepPanRequestPtr;
typedef boost::shared_ptr< ::amtec::SweepPanRequest const> SweepPanRequestConstPtr;



template <class ContainerAllocator>
struct SweepPanResponse_ {
  typedef SweepPanResponse_<ContainerAllocator> Type;

  SweepPanResponse_()
  {
  }

  SweepPanResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::amtec::SweepPanResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amtec::SweepPanResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SweepPanResponse
typedef  ::amtec::SweepPanResponse_<std::allocator<void> > SweepPanResponse;

typedef boost::shared_ptr< ::amtec::SweepPanResponse> SweepPanResponsePtr;
typedef boost::shared_ptr< ::amtec::SweepPanResponse const> SweepPanResponseConstPtr;


struct SweepPan
{

typedef SweepPanRequest Request;
typedef SweepPanResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SweepPan
} // namespace amtec

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::amtec::SweepPanRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::amtec::SweepPanRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::amtec::SweepPanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5ecc0a29ab6ceff25a8c7df356aada72";
  }

  static const char* value(const  ::amtec::SweepPanRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5ecc0a29ab6ceff2ULL;
  static const uint64_t static_value2 = 0x5a8c7df356aada72ULL;
};

template<class ContainerAllocator>
struct DataType< ::amtec::SweepPanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "amtec/SweepPanRequest";
  }

  static const char* value(const  ::amtec::SweepPanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::amtec::SweepPanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 sweep_amplitude\n\
float64 sweep_period\n\
\n\
";
  }

  static const char* value(const  ::amtec::SweepPanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::amtec::SweepPanRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::amtec::SweepPanResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::amtec::SweepPanResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::amtec::SweepPanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::amtec::SweepPanResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::amtec::SweepPanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "amtec/SweepPanResponse";
  }

  static const char* value(const  ::amtec::SweepPanResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::amtec::SweepPanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::amtec::SweepPanResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::amtec::SweepPanResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::amtec::SweepPanRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sweep_amplitude);
    stream.next(m.sweep_period);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SweepPanRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::amtec::SweepPanResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SweepPanResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<amtec::SweepPan> {
  static const char* value() 
  {
    return "5ecc0a29ab6ceff25a8c7df356aada72";
  }

  static const char* value(const amtec::SweepPan&) { return value(); } 
};

template<>
struct DataType<amtec::SweepPan> {
  static const char* value() 
  {
    return "amtec/SweepPan";
  }

  static const char* value(const amtec::SweepPan&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<amtec::SweepPanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5ecc0a29ab6ceff25a8c7df356aada72";
  }

  static const char* value(const amtec::SweepPanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<amtec::SweepPanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "amtec/SweepPan";
  }

  static const char* value(const amtec::SweepPanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<amtec::SweepPanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5ecc0a29ab6ceff25a8c7df356aada72";
  }

  static const char* value(const amtec::SweepPanResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<amtec::SweepPanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "amtec/SweepPan";
  }

  static const char* value(const amtec::SweepPanResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // AMTEC_SERVICE_SWEEPPAN_H

