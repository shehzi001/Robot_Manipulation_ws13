/* Auto-generated by genmsg_cpp for file /home/shehzad/catkin_ws/bosch_drivers/bmp085/srv/measure.srv */
#ifndef BMP085_SERVICE_MEASURE_H
#define BMP085_SERVICE_MEASURE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace bmp085
{
template <class ContainerAllocator>
struct measureRequest_ {
  typedef measureRequest_<ContainerAllocator> Type;

  measureRequest_()
  {
  }

  measureRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::bmp085::measureRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bmp085::measureRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct measureRequest
typedef  ::bmp085::measureRequest_<std::allocator<void> > measureRequest;

typedef boost::shared_ptr< ::bmp085::measureRequest> measureRequestPtr;
typedef boost::shared_ptr< ::bmp085::measureRequest const> measureRequestConstPtr;



template <class ContainerAllocator>
struct measureResponse_ {
  typedef measureResponse_<ContainerAllocator> Type;

  measureResponse_()
  {
  }

  measureResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::bmp085::measureResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bmp085::measureResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct measureResponse
typedef  ::bmp085::measureResponse_<std::allocator<void> > measureResponse;

typedef boost::shared_ptr< ::bmp085::measureResponse> measureResponsePtr;
typedef boost::shared_ptr< ::bmp085::measureResponse const> measureResponseConstPtr;


struct measure
{

typedef measureRequest Request;
typedef measureResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct measure
} // namespace bmp085

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bmp085::measureRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bmp085::measureRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bmp085::measureRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::bmp085::measureRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::bmp085::measureRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bmp085/measureRequest";
  }

  static const char* value(const  ::bmp085::measureRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bmp085::measureRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::bmp085::measureRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::bmp085::measureRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bmp085::measureResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bmp085::measureResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bmp085::measureResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::bmp085::measureResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::bmp085::measureResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bmp085/measureResponse";
  }

  static const char* value(const  ::bmp085::measureResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bmp085::measureResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::bmp085::measureResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::bmp085::measureResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bmp085::measureRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct measureRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bmp085::measureResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct measureResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<bmp085::measure> {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const bmp085::measure&) { return value(); } 
};

template<>
struct DataType<bmp085::measure> {
  static const char* value() 
  {
    return "bmp085/measure";
  }

  static const char* value(const bmp085::measure&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<bmp085::measureRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const bmp085::measureRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<bmp085::measureRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bmp085/measure";
  }

  static const char* value(const bmp085::measureRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<bmp085::measureResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const bmp085::measureResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<bmp085::measureResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bmp085/measure";
  }

  static const char* value(const bmp085::measureResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // BMP085_SERVICE_MEASURE_H

