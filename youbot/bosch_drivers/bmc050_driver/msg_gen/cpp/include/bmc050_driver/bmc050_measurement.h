/* Auto-generated by genmsg_cpp for file /home/shehzad/catkin_ws/bosch_drivers/bmc050_driver/msg/bmc050_measurement.msg */
#ifndef BMC050_DRIVER_MESSAGE_BMC050_MEASUREMENT_H
#define BMC050_DRIVER_MESSAGE_BMC050_MEASUREMENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace bmc050_driver
{
template <class ContainerAllocator>
struct bmc050_measurement_ {
  typedef bmc050_measurement_<ContainerAllocator> Type;

  bmc050_measurement_()
  : header()
  , AccelerationX()
  , AccelerationY()
  , AccelerationZ()
  , Temperature()
  , MagneticFieldIntensityX()
  , MagneticFieldIntensityY()
  , MagneticFieldIntensityZ()
  , HallResistance()
  {
  }

  bmc050_measurement_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , AccelerationX(_alloc)
  , AccelerationY(_alloc)
  , AccelerationZ(_alloc)
  , Temperature(_alloc)
  , MagneticFieldIntensityX(_alloc)
  , MagneticFieldIntensityY(_alloc)
  , MagneticFieldIntensityZ(_alloc)
  , HallResistance(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _AccelerationX_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  AccelerationX;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _AccelerationY_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  AccelerationY;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _AccelerationZ_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  AccelerationZ;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Temperature_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  Temperature;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _MagneticFieldIntensityX_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  MagneticFieldIntensityX;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _MagneticFieldIntensityY_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  MagneticFieldIntensityY;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _MagneticFieldIntensityZ_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  MagneticFieldIntensityZ;

  typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _HallResistance_type;
  std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  HallResistance;


  typedef boost::shared_ptr< ::bmc050_driver::bmc050_measurement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bmc050_driver::bmc050_measurement_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct bmc050_measurement
typedef  ::bmc050_driver::bmc050_measurement_<std::allocator<void> > bmc050_measurement;

typedef boost::shared_ptr< ::bmc050_driver::bmc050_measurement> bmc050_measurementPtr;
typedef boost::shared_ptr< ::bmc050_driver::bmc050_measurement const> bmc050_measurementConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::bmc050_driver::bmc050_measurement_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::bmc050_driver::bmc050_measurement_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace bmc050_driver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bmc050_driver::bmc050_measurement_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bmc050_driver::bmc050_measurement_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bmc050_driver::bmc050_measurement_<ContainerAllocator> > {
  static const char* value() 
  {
    return "018c77a7bfb5d925516f29f71a5163ed";
  }

  static const char* value(const  ::bmc050_driver::bmc050_measurement_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x018c77a7bfb5d925ULL;
  static const uint64_t static_value2 = 0x516f29f71a5163edULL;
};

template<class ContainerAllocator>
struct DataType< ::bmc050_driver::bmc050_measurement_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bmc050_driver/bmc050_measurement";
  }

  static const char* value(const  ::bmc050_driver::bmc050_measurement_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bmc050_driver::bmc050_measurement_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float64[] AccelerationX #[g]\n\
float64[] AccelerationY #[g]\n\
float64[] AccelerationZ #[g]\n\
float64[] Temperature #[C]\n\
float64[] MagneticFieldIntensityX #[uT]\n\
float64[] MagneticFieldIntensityY #[uT]\n\
float64[] MagneticFieldIntensityZ #[uT]\n\
uint16[] HallResistance #[ohms]\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::bmc050_driver::bmc050_measurement_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::bmc050_driver::bmc050_measurement_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::bmc050_driver::bmc050_measurement_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bmc050_driver::bmc050_measurement_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.AccelerationX);
    stream.next(m.AccelerationY);
    stream.next(m.AccelerationZ);
    stream.next(m.Temperature);
    stream.next(m.MagneticFieldIntensityX);
    stream.next(m.MagneticFieldIntensityY);
    stream.next(m.MagneticFieldIntensityZ);
    stream.next(m.HallResistance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct bmc050_measurement_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bmc050_driver::bmc050_measurement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::bmc050_driver::bmc050_measurement_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "AccelerationX[]" << std::endl;
    for (size_t i = 0; i < v.AccelerationX.size(); ++i)
    {
      s << indent << "  AccelerationX[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.AccelerationX[i]);
    }
    s << indent << "AccelerationY[]" << std::endl;
    for (size_t i = 0; i < v.AccelerationY.size(); ++i)
    {
      s << indent << "  AccelerationY[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.AccelerationY[i]);
    }
    s << indent << "AccelerationZ[]" << std::endl;
    for (size_t i = 0; i < v.AccelerationZ.size(); ++i)
    {
      s << indent << "  AccelerationZ[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.AccelerationZ[i]);
    }
    s << indent << "Temperature[]" << std::endl;
    for (size_t i = 0; i < v.Temperature.size(); ++i)
    {
      s << indent << "  Temperature[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Temperature[i]);
    }
    s << indent << "MagneticFieldIntensityX[]" << std::endl;
    for (size_t i = 0; i < v.MagneticFieldIntensityX.size(); ++i)
    {
      s << indent << "  MagneticFieldIntensityX[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.MagneticFieldIntensityX[i]);
    }
    s << indent << "MagneticFieldIntensityY[]" << std::endl;
    for (size_t i = 0; i < v.MagneticFieldIntensityY.size(); ++i)
    {
      s << indent << "  MagneticFieldIntensityY[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.MagneticFieldIntensityY[i]);
    }
    s << indent << "MagneticFieldIntensityZ[]" << std::endl;
    for (size_t i = 0; i < v.MagneticFieldIntensityZ.size(); ++i)
    {
      s << indent << "  MagneticFieldIntensityZ[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.MagneticFieldIntensityZ[i]);
    }
    s << indent << "HallResistance[]" << std::endl;
    for (size_t i = 0; i < v.HallResistance.size(); ++i)
    {
      s << indent << "  HallResistance[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.HallResistance[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // BMC050_DRIVER_MESSAGE_BMC050_MEASUREMENT_H

