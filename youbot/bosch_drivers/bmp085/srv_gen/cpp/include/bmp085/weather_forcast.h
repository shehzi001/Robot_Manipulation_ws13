/* Auto-generated by genmsg_cpp for file /home/shehzad/catkin_ws/bosch_drivers/bmp085/srv/weather_forcast.srv */
#ifndef BMP085_SERVICE_WEATHER_FORCAST_H
#define BMP085_SERVICE_WEATHER_FORCAST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace bmp085
{
template <class ContainerAllocator>
struct weather_forcastRequest_ {
  typedef weather_forcastRequest_<ContainerAllocator> Type;

  weather_forcastRequest_()
  {
  }

  weather_forcastRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::bmp085::weather_forcastRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bmp085::weather_forcastRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct weather_forcastRequest
typedef  ::bmp085::weather_forcastRequest_<std::allocator<void> > weather_forcastRequest;

typedef boost::shared_ptr< ::bmp085::weather_forcastRequest> weather_forcastRequestPtr;
typedef boost::shared_ptr< ::bmp085::weather_forcastRequest const> weather_forcastRequestConstPtr;



template <class ContainerAllocator>
struct weather_forcastResponse_ {
  typedef weather_forcastResponse_<ContainerAllocator> Type;

  weather_forcastResponse_()
  {
  }

  weather_forcastResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::bmp085::weather_forcastResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bmp085::weather_forcastResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct weather_forcastResponse
typedef  ::bmp085::weather_forcastResponse_<std::allocator<void> > weather_forcastResponse;

typedef boost::shared_ptr< ::bmp085::weather_forcastResponse> weather_forcastResponsePtr;
typedef boost::shared_ptr< ::bmp085::weather_forcastResponse const> weather_forcastResponseConstPtr;


struct weather_forcast
{

typedef weather_forcastRequest Request;
typedef weather_forcastResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct weather_forcast
} // namespace bmp085

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bmp085::weather_forcastRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bmp085::weather_forcastRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bmp085::weather_forcastRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::bmp085::weather_forcastRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::bmp085::weather_forcastRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bmp085/weather_forcastRequest";
  }

  static const char* value(const  ::bmp085::weather_forcastRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bmp085::weather_forcastRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::bmp085::weather_forcastRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::bmp085::weather_forcastRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bmp085::weather_forcastResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bmp085::weather_forcastResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bmp085::weather_forcastResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::bmp085::weather_forcastResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::bmp085::weather_forcastResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bmp085/weather_forcastResponse";
  }

  static const char* value(const  ::bmp085::weather_forcastResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bmp085::weather_forcastResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::bmp085::weather_forcastResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::bmp085::weather_forcastResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bmp085::weather_forcastRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct weather_forcastRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bmp085::weather_forcastResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct weather_forcastResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<bmp085::weather_forcast> {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const bmp085::weather_forcast&) { return value(); } 
};

template<>
struct DataType<bmp085::weather_forcast> {
  static const char* value() 
  {
    return "bmp085/weather_forcast";
  }

  static const char* value(const bmp085::weather_forcast&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<bmp085::weather_forcastRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const bmp085::weather_forcastRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<bmp085::weather_forcastRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bmp085/weather_forcast";
  }

  static const char* value(const bmp085::weather_forcastRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<bmp085::weather_forcastResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const bmp085::weather_forcastResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<bmp085::weather_forcastResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bmp085/weather_forcast";
  }

  static const char* value(const bmp085::weather_forcastResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // BMP085_SERVICE_WEATHER_FORCAST_H

